"""
Invites interactives avec Rich et Questionary
"""
import questionary
from pathlib import Path
from typing import List, Optional
from rich.console import Console
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich import box
from prompt_toolkit.completion import PathCompleter as PTPathCompleter
from prompt_toolkit.shortcuts import prompt
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit.key_binding import KeyBindings
import os

from ...core.db_manager import ConflictAction


console = Console()


class ExcelFileValidator(Validator):
    """Validateur pour v√©rifier que le fichier Excel existe."""
    
    def validate(self, document):
        text = document.text.strip()
        if not text:
            return
        
        path = Path(text)
        if not path.is_absolute():
            path = Path.cwd() / path
        
        if not path.exists():
            raise ValidationError(message=f"Le chemin n'existe pas")
        
        if path.is_dir():
            raise ValidationError(message=f"C'est un dossier, pas un fichier")
        
        if path.suffix.lower() not in ['.xlsx', '.xls', '.xlsm']:
            raise ValidationError(message=f"Ce n'est pas un fichier Excel (.xlsx, .xls, .xlsm)")


def prompt_excel_file() -> Optional[Path]:
    """
    Demander √† l'utilisateur de s√©lectionner un fichier Excel avec auto-compl√©tion.
    Utilise une vraie auto-compl√©tion de fichiers depuis le r√©pertoire courant.
    
    Returns:
        Chemin du fichier s√©lectionn√© ou None si annul√©
    """
    console.print(Panel(
        "[bold cyan]S√©lection du fichier Excel[/bold cyan]\n\n"
        "[dim]üí° Tab pour compl√©ter\n"
        "üìÅ Tab sur un dossier pour le s√©lectionner\n"
        f"‚úÖ Entr√©e pour valider[/dim]",
        border_style="cyan",
        box=box.ROUNDED
    ))
    
    # Cr√©er le completer avec filtrage pour Excel
    def excel_file_filter(path):
        """Filtre pour ne montrer que les fichiers Excel et les dossiers."""
        p = Path(path)
        if p.is_dir():
            return True
        return p.suffix.lower() in ['.xlsx', '.xls', '.xlsm']
    
    completer = PTPathCompleter(
        only_directories=False,
        expanduser=True,
        file_filter=excel_file_filter
    )
    
    # Key bindings pour ajouter automatiquement \ apr√®s un dossier
    kb = KeyBindings()
    
    @kb.add('tab')
    def _(event):
        r"""Tab : compl√©ter et ajouter \ si c'est un dossier."""
        buff = event.current_buffer
        
        # Si on a une compl√©tion en cours, appliquer la premi√®re
        if buff.complete_state:
            completion = buff.complete_state.current_completion
            if completion:
                buff.apply_completion(completion)
                
                # V√©rifier si le texte complet est un dossier
                text = buff.text
                path = Path(text) if Path(text).is_absolute() else Path.cwd() / text
                
                # Si c'est un dossier et ne se termine pas d√©j√† par un s√©parateur
                if path.exists() and path.is_dir() and not text.endswith(os.sep):
                    buff.insert_text(os.sep)
                    # Relancer la compl√©tion pour montrer le contenu du dossier
                    buff.start_completion(select_first=False)
            else:
                buff.complete_next()
        else:
            # D√©marrer la compl√©tion
            buff.start_completion(select_first=True)
    
    try:
        file_path = prompt(
            "üîç Chemin du fichier Excel : ",
            completer=completer,
            complete_while_typing=False,
            key_bindings=kb,
        ).strip()
        
        if not file_path:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        # Convertir en Path
        path = Path(file_path)
        if not path.is_absolute():
            path = Path.cwd() / path
        
        # V√©rifier que le fichier existe
        if not path.exists():
            console.print(f"[red]‚úó Le fichier n'existe pas[/red]")
            return None
        
        # V√©rifier que c'est bien un fichier
        if not path.is_file():
            console.print(f"[red]‚úó Ce n'est pas un fichier[/red]")
            return None
        
        # V√©rifier l'extension
        if path.suffix.lower() not in ['.xlsx', '.xls', '.xlsm']:
            console.print(f"[yellow]‚ö†Ô∏è  Le fichier ne semble pas √™tre un fichier Excel[/yellow]")
            if not confirm_action("Voulez-vous continuer quand m√™me ?", default=False):
                return None
        
        console.print(f"[green]‚úì Fichier : {path}[/green]")
        return path
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None
    except EOFError:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def prompt_database_name(default_name: str) -> Optional[str]:
    """
    Demander le nom souhait√© pour la base de donn√©es avec Rich.
    
    Args:
        default_name: Nom propos√© par d√©faut
        
    Returns:
        Nom de la base de donn√©es ou None si annul√©
    """
    try:
        db_name = Prompt.ask(
            "\n[bold]üíæ Nom de la base de donn√©es[/bold] ",
            default=default_name,
            console=console
        )
        
        if not db_name:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        # Ajouter automatiquement l'extension .db si n√©cessaire
        if not db_name.endswith('.db'):
            db_name += '.db'
        
        console.print(f"[green]‚úì Base de donn√©es: {db_name}[/green]")
        return db_name
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def prompt_select_sheets(sheets_info: List[dict]) -> Optional[List[str]]:
    """
    Demander √† l'utilisateur de s√©lectionner les feuilles √† convertir.
    
    Args:
        sheets_info: Liste des informations sur les feuilles
        
    Returns:
        Liste des noms de feuilles s√©lectionn√©es ou None si annul√©
    """
    if not sheets_info:
        return None
    
    # Pr√©parer les choix pour questionary avec checked
    choices = [
        questionary.Choice(
            title=f"{info['name']} ({info['rows']:,} lignes √ó {info['columns']} colonnes)",
            value=info['name'],
            checked=True  # Pr√©s√©lectionn√© par d√©faut
        )
        for info in sheets_info
    ]
    
    # Utiliser questionary pour la s√©lection multiple
    selected = questionary.checkbox(
        "üìë S√©lectionnez les feuilles √† convertir :",
        choices=choices
    ).ask()
    
    if selected is None:
        return None
    
    if not selected:
        console.print("[yellow]‚ö†Ô∏è  Aucune feuille s√©lectionn√©e[/yellow]")
        return None
    
    console.print(f"[green]‚úì {len(selected)} feuille(s) s√©lectionn√©e(s)[/green]")
    return selected


def prompt_conflict_action(table_name: str, existing_rows: int) -> Optional[ConflictAction]:
    """
    Demander l'action √† effectuer en cas de conflit de table existante.
    
    Args:
        table_name: Nom de la table en conflit
        existing_rows: Nombre de lignes dans la table existante
        
    Returns:
        Action choisie ou None si annul√©
    """
    console.print()
    console.print(Panel(
        f"[bold yellow]‚ö†Ô∏è  Conflit d√©tect√©[/bold yellow]\n\n"
        f"La table [cyan]'{table_name}'[/cyan] existe d√©j√† avec "
        f"[yellow]{existing_rows:,}[/yellow] lignes.\n\n"
        f"[dim]Que souhaitez-vous faire ?[/dim]",
        border_style="yellow",
        box=box.HEAVY
    ))
    
    # Utiliser questionary.select pour une navigation au clavier
    action = questionary.select(
        "Choisissez une action :",
        choices=[
            questionary.Choice("üî¥ √âcraser - Supprimer et recr√©er la table", value="overwrite"),
            questionary.Choice("‚ûï Ajouter - Ajouter les donn√©es √† la table existante", value="append"),
            questionary.Choice("‚äò Ignorer - Passer √† la feuille suivante", value="skip"),
            questionary.Choice("‚úó Annuler - Arr√™ter l'op√©ration compl√®te", value="cancel")
        ],
        default="append"
    ).ask()
    
    if action is None:
        return "cancel"
    
    # Messages de confirmation
    messages = {
        "overwrite": "[red]‚ö†Ô∏è  La table sera √©cras√©e[/red]",
        "append": "[green]‚úì Les donn√©es seront ajout√©es[/green]",
        "skip": "[yellow]‚äò Feuille ignor√©e[/yellow]",
        "cancel": "[dim]‚úó Op√©ration annul√©e[/dim]"
    }
    
    console.print(messages[action])
    return action


def prompt_new_database_name(original_name: str) -> Optional[str]:
    """
    Demander un nouveau nom pour la base de donn√©es avec Rich.
    
    Args:
        original_name: Nom d'origine de la base
        
    Returns:
        Nouveau nom ou None si annul√©
    """
    # Sugg√©rer un nom avec un suffixe
    base_name = original_name.replace('.db', '')
    suggestion = f"{base_name}_new.db"
    
    console.print(Panel(
        "[bold cyan]Nouveau nom de base de donn√©es[/bold cyan]\n\n"
        f"[dim]Le fichier original: {original_name}[/dim]",
        border_style="cyan",
        box=box.ROUNDED
    ))
    
    try:
        new_name = Prompt.ask(
            "\n[bold]üíæ Nouveau nom[/bold]",
            default=suggestion,
            console=console
        )
        
        if not new_name:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        if not new_name.endswith('.db'):
            new_name += '.db'
        
        console.print(f"[green]‚úì Nouveau nom: {new_name}[/green]")
        return new_name
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def confirm_action(message: str, default: bool = False) -> bool:
    """
    Demander une confirmation √† l'utilisateur avec Rich.
    
    Args:
        message: Message de confirmation
        default: Valeur par d√©faut
        
    Returns:
        True si confirm√©, False sinon
    """
    try:
        return Confirm.ask(
            f"[bold cyan]‚ùì {message}[/bold cyan]",
            default=default,
            console=console
        )
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return False


def prompt_database_exists_action() -> Optional[str]:
    """
    Demander l'action √† effectuer si la base de donn√©es existe d√©j√†.
    
    Returns:
        Action choisie ('use', 'overwrite', 'rename') ou None si annul√©
    """
    console.print()
    console.print(Panel(
        "[bold yellow]‚ö†Ô∏è Base de donn√©es existante[/bold yellow]\n\n"
        "[dim]La base de donn√©es existe d√©j√†. Que souhaitez-vous faire ?[/dim]",
        border_style="yellow",
        box=box.HEAVY
    ))
    
    # Utiliser questionary.select pour une navigation au clavier
    action = questionary.select(
        "Choisissez une action :",
        choices=[
            questionary.Choice("üîÑ Utiliser - Utiliser la base existante (g√©rer les conflits table par table)", value="use"),
            questionary.Choice("üóëÔ∏è √âcraser - Supprimer compl√®tement et recr√©er la base", value="overwrite"),
            questionary.Choice("üìù Renommer - Cr√©er une nouvelle base avec un autre nom", value="rename"),
            questionary.Choice("‚úó Annuler - Arr√™ter l'op√©ration", value="cancel")
        ]
    ).ask()
    
    if action is None:
        return "cancel"
    
    messages = {
        "use": "[green]‚úì Utilisation de la base existante[/green]",
        "overwrite": "[red]‚ö†Ô∏è  La base sera √©cras√©e[/red]",
        "rename": "[cyan]‚úì Cr√©ation d'une nouvelle base[/cyan]",
        "cancel": "[dim]‚úó Op√©ration annul√©e[/dim]"
    }
    
    console.print(messages[action])
    return action


def prompt_chunk_size(default: int = 10000) -> int:
    """
    Demander la taille des lots (chunks) pour l'insertion avec Rich.
    
    Args:
        default: Valeur par d√©faut propos√©e
        
    Returns:
        Taille des lots choisie
    """
    console.print(Panel(
        "[bold cyan]Configuration avanc√©e[/bold cyan]\n\n"
        "[dim]Taille des chunks pour l'insertion par batch[/dim]\n"
        "[dim]Valeurs recommand√©es: 1000-50000[/dim]",
        border_style="cyan",
        box=box.ROUNDED
    ))
    
    try:
        size = IntPrompt.ask(
            "\n[bold]üì¶ Taille des chunks[/bold]",
            default=default,
            console=console
        )
        
        if size <= 0:
            console.print("[yellow]‚ö†Ô∏è  Valeur invalide, utilisation de la valeur par d√©faut[/yellow]")
            return default
        
        console.print(f"[green]‚úì Taille des chunks: {size:,}[/green]")
        return size
        
    except (KeyboardInterrupt, ValueError):
        console.print("\n[yellow]‚ö†Ô∏è  Utilisation de la valeur par d√©faut[/yellow]")
        return default

"""
Invites interactives pour la conversion SQLite vers Excel
"""
import questionary
from pathlib import Path
from typing import List, Optional
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel
from rich import box
from prompt_toolkit.completion import PathCompleter as PTPathCompleter
from prompt_toolkit.shortcuts import prompt
from prompt_toolkit.key_binding import KeyBindings
import os


console = Console()


def prompt_database_file() -> Optional[Path]:
    """
    Demander √† l'utilisateur de s√©lectionner un fichier SQLite avec auto-compl√©tion.
    
    Returns:
        Chemin du fichier s√©lectionn√© ou None si annul√©
    """
    console.print(Panel(
        "[bold cyan]S√©lection de la base de donn√©es SQLite[/bold cyan]\n\n"
        "[dim]üí° Tab pour compl√©ter\n"
        "üìÅ Tab sur un dossier pour le s√©lectionner\n"
        f"‚úÖ Entr√©e pour valider[/dim]",
        border_style="cyan",
        box=box.ROUNDED
    ))
    
    # Cr√©er le completer avec filtrage pour les fichiers de base de donn√©es
    def db_file_filter(path):
        """Filtre pour ne montrer que les fichiers de base de donn√©es et les dossiers."""
        p = Path(path)
        if p.is_dir():
            return True
        return p.suffix.lower() in ['.db', '.sqlite', '.sqlite3']
    
    completer = PTPathCompleter(
        only_directories=False,
        expanduser=True,
        file_filter=db_file_filter
    )
    
    # Key bindings pour ajouter automatiquement \ apr√®s un dossier
    kb = KeyBindings()
    
    @kb.add('tab')
    def _(event):
        """Tab : compl√©ter et ajouter \\ si c'est un dossier."""
        buff = event.current_buffer
        
        # Si on a une compl√©tion en cours, appliquer la premi√®re
        if buff.complete_state:
            completion = buff.complete_state.current_completion
            if completion:
                buff.apply_completion(completion)
                
                # V√©rifier si le texte complet est un dossier
                text = buff.text
                path = Path(text) if Path(text).is_absolute() else Path.cwd() / text
                
                # Si c'est un dossier et ne se termine pas d√©j√† par un s√©parateur
                if path.exists() and path.is_dir() and not text.endswith(os.sep):
                    buff.insert_text(os.sep)
                    # Relancer la compl√©tion pour montrer le contenu du dossier
                    buff.start_completion(select_first=False)
            else:
                buff.complete_next()
        else:
            # D√©marrer la compl√©tion
            buff.start_completion(select_first=True)
    
    try:
        file_path = prompt(
            "üîç Chemin de la base de donn√©es : ",
            completer=completer,
            complete_while_typing=False,
            key_bindings=kb,
        ).strip()
        
        if not file_path:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        # Convertir en Path
        path = Path(file_path)
        if not path.is_absolute():
            path = Path.cwd() / path
        
        # V√©rifier que le fichier existe
        if not path.exists():
            console.print(f"[red]‚úó Le fichier n'existe pas[/red]")
            return None
        
        # V√©rifier que c'est bien un fichier
        if not path.is_file():
            console.print(f"[red]‚úó Ce n'est pas un fichier[/red]")
            return None
        
        console.print(f"[green]‚úì Base de donn√©es : {path}[/green]")
        return path
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None
    except EOFError:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def prompt_excel_name(default_name: str) -> Optional[str]:
    """
    Demander le nom souhait√© pour le fichier Excel avec Rich.
    
    Args:
        default_name: Nom propos√© par d√©faut
        
    Returns:
        Nom du fichier Excel ou None si annul√©
    """
    try:
        excel_name = Prompt.ask(
            "\n[bold]üìä Nom du fichier Excel[/bold] ",
            default=default_name,
            console=console
        )
        
        if not excel_name:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        # Ajouter automatiquement l'extension .xlsx si n√©cessaire
        if not excel_name.endswith('.xlsx'):
            excel_name += '.xlsx'
        
        console.print(f"[green]‚úì Fichier Excel: {excel_name}[/green]")
        return excel_name
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def prompt_select_tables(tables_info: List[dict]) -> Optional[List[str]]:
    """
    Demander √† l'utilisateur de s√©lectionner les tables √† exporter.
    
    Args:
        tables_info: Liste des informations sur les tables
        
    Returns:
        Liste des noms de tables s√©lectionn√©es ou None si annul√©
    """
    if not tables_info:
        return None
    
    # Pr√©parer les choix pour questionary avec checked
    choices = [
        questionary.Choice(
            title=f"{info['name']} ({info['rows']:,} lignes √ó {info['columns']} colonnes)",
            value=info['name'],
            checked=True  # Pr√©s√©lectionn√© par d√©faut
        )
        for info in tables_info
    ]
    
    # Utiliser questionary pour la s√©lection multiple
    selected = questionary.checkbox(
        "üìä S√©lectionnez les tables √† exporter :",
        choices=choices
    ).ask()
    
    if selected is None:
        return None
    
    if not selected:
        console.print("[yellow]‚ö†Ô∏è  Aucune table s√©lectionn√©e[/yellow]")
        return None
    
    console.print(f"[green]‚úì {len(selected)} table(s) s√©lectionn√©e(s)[/green]")
    return selected


def prompt_excel_exists_action() -> Optional[str]:
    """
    Demander l'action √† effectuer si le fichier Excel existe d√©j√†.
    
    Returns:
        Action choisie ('overwrite', 'rename', 'cancel') ou None si annul√©
    """
    console.print()
    console.print(Panel(
        "[bold yellow]‚ö†Ô∏è Fichier Excel existant[/bold yellow]\n\n"
        "[dim]Le fichier Excel existe d√©j√†. Que souhaitez-vous faire ?[/dim]",
        border_style="yellow",
        box=box.HEAVY
    ))
    
    # Utiliser questionary.select pour une navigation au clavier
    action = questionary.select(
        "Choisissez une action :",
        choices=[
            questionary.Choice("üóëÔ∏è √âcraser - Remplacer le fichier existant", value="overwrite"),
            questionary.Choice("üìù Renommer - Cr√©er un nouveau fichier avec un autre nom", value="rename"),
            questionary.Choice("‚úó Annuler - Arr√™ter l'op√©ration", value="cancel")
        ]
    ).ask()
    
    if action is None:
        return "cancel"
    
    messages = {
        "overwrite": "[red]‚ö†Ô∏è  Le fichier sera √©cras√©[/red]",
        "rename": "[cyan]‚úì Cr√©ation d'un nouveau fichier[/cyan]",
        "cancel": "[dim]‚úó Op√©ration annul√©e[/dim]"
    }
    
    console.print(messages[action])
    return action


def prompt_new_excel_name(original_name: str) -> Optional[str]:
    """
    Demander un nouveau nom pour le fichier Excel avec Rich.
    
    Args:
        original_name: Nom d'origine du fichier
        
    Returns:
        Nouveau nom ou None si annul√©
    """
    # Sugg√©rer un nom avec un suffixe
    base_name = original_name.replace('.xlsx', '')
    suggestion = f"{base_name}_new.xlsx"
    
    console.print(Panel(
        "[bold cyan]Nouveau nom de fichier Excel[/bold cyan]\n\n"
        f"[dim]Le fichier original: {original_name}[/dim]",
        border_style="cyan",
        box=box.ROUNDED
    ))
    
    try:
        new_name = Prompt.ask(
            "\n[bold]üìä Nouveau nom[/bold]",
            default=suggestion,
            console=console
        )
        
        if not new_name:
            console.print("[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
            return None
        
        if not new_name.endswith('.xlsx'):
            new_name += '.xlsx'
        
        console.print(f"[green]‚úì Nouveau nom: {new_name}[/green]")
        return new_name
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return None


def confirm_action(message: str, default: bool = False) -> bool:
    """
    Demander une confirmation √† l'utilisateur avec Rich.
    
    Args:
        message: Message de confirmation
        default: Valeur par d√©faut
        
    Returns:
        True si confirm√©, False sinon
    """
    try:
        return Confirm.ask(
            f"[bold cyan]‚ùì {message}[/bold cyan]",
            default=default,
            console=console
        )
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Op√©ration annul√©e[/yellow]")
        return False
